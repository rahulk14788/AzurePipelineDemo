# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- main
- develop
- feature/*
- bugfix/*
- hotfix/*

pool:
  name: 'Demo'
  artifactName: drop
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  jobs:
    - job: 'BuildClient'
      steps:
      - task: Npm@1
        displayName: 'Install Client Dependencies'
        inputs:
          command: 'install'
          workingDir: 'ClientApp'

      - task: Npm@1
        displayName: 'Build Client Application'
        inputs:
          command: 'ci'
          workingDir: 'ClientApp'
          customCommand: 'run build --prod'

      # - task: Npm@1
      #   displayName: 'Test Client Application'
      #   inputs:
      #     command: 'custom'
      #     workingDir: 'ClientApp'
      #     customCommand: 'run test --watch=false'

    - job: 'BuildDotNet'
      steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'
        displayName: 'dotnet build $(buildConfiguration)'

      - script: echo 'Hello World'
        displayName: 'dotnet build $(buildConfiguration)' 

      - task: DotNetCoreCLI@2
        displayName: 'Publish Application'
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--configuration $(buildConfiguration)  --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
          zipAfterPublish: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

- stage: 'DevDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: deploy in Development Web App
    variables:
      app: 'WebAppNameDev'
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Development'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:        
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(f8e5a197-e71b-4ecc-a5ea-740aae4aea0d)'
              appType: 'webAppLinux'
              WebAppName: '$(app)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'TestDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: deploy in Testing Web App
    variables:
      app: 'WebAppNameTesting'
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Test'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:        
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(f8e5a197-e71b-4ecc-a5ea-740aae4aea0d)'
              appType: 'webAppLinux'
              WebAppName: '$(app)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'StagingDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: deploy in Staging Web App
    variables:
      app: 'WebAppNameStage'
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Staging'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:        
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(f8e5a197-e71b-4ecc-a5ea-740aae4aea0d)'
              appType: 'webAppLinux'
              WebAppName: '$(app)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'ProdDeployment'
  jobs:
    # Track deployments on the environment.
  - deployment: DeployWeb
    displayName: deploy in Prod Web App
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    variables:
      app: 'WebAppNameProd'
    pool:
      name: 'Demo'
    # Creates an environment if it doesn't exist.
    environment: 'Prod'
    strategy:
      # Default deployment strategy, more coming...
      runOnce:        
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(f8e5a197-e71b-4ecc-a5ea-740aae4aea0d)'
              appType: 'webAppLinux'
              WebAppName: '$(app)'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'


